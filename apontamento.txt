APONTAMENTOS PARA O MINISHELL:

Funções até agora estudadas:

readline(char *prompt): Printa o prompt no terminal e recebe uma string 
dada pelo user que pode ser editada. Retorna a linha que depois tem que
ser free'd.

add_history(char *line): Recebe a linha e guarda-a num buffer estático,
ou seja, podemos dar free à line assim que fôr utilizada por add_history()

rl_clear_history():clears history from the add_history() function

void rl_redisplay(): Muda o que está no terminal para refletir o que está 
no buffer de edição (rl_line_buffer).

access(const char *pathname, int mode): É uma função que vê se o processo que a chama tem autorização para
aceder o ficheiro pathname. O mode apenas especifica o tipo de check que 
fazemos. Tipos de check: existência, read, write, execute.

int open(const char *pathname, int flags): Abre o ficheiro localizado em pathname.
Se o ficheiro não existir, dependendo da flag, pode tentar criá-lo. Retorna o FD do 
ficheiro associado se a função correr co sucesso. Algumas flags: O_RDONLY, O_WRONLY, or O_RDWR.

ssize_t read(int fd, void *buf, size_t count): Tenta ler count bytes do fd e escrevẽ⁻los
no buf. Em ficheiros que o suportem, o read pode começar a sua operação a partir de file offset
e incrementá-lo a mesma qtd de vezes que bytes lidos. Se file offset >= EOF, retorna 0.
Se count == 0, o read() ~pode~ checkar erros ou pode retornar 0.

close(): Fecha o fd aberto anteriormente por open().

pid_t fork(): Cria um novo processo (child process) que é uma cópia exata do processo criador
(parent process) exceto as seguintes caracteristicas:
		-O child process tem um PID único.
		-O PID da child process não iguala nenhum processo ativo
		-PID diferente do parent process
		-O child process tem a sua pŕopria cópia do parent process fd's
		-O child process tem a sua própria cópia do parent process open directory streams
		-etc...

pid_t wait(int *wstatus): Espera pela mudança de estado do child process da calling
function. A mudança pode ser a terminação, a paragem e o recomeço do child process através de signals.
No caso da terminação do child process, o wait() permite libertar os recursos do processo. Se 
wait() não fôr chamado, o processo fica num estado zombie.

pid_t waitpid(pid_t pid, int *wstatus, int options):Wait() suspende a execução da thread até um dos seus
child processes terminar. Fazer a chamada a wait(&wstatus) é equivalente a: waitpid(-1, &wstatus, 0);
Waitpid() suspende a execução da thread até um child process especificado pelo pid termine.

int sigaction(int signum, const struct sigaction *restrict act,
	struct sigaction *restrict oldact): Precisa da estrutura struct sigaction.
Muda a ação que um processo faz quando recebe um sinal específico. signum pode ser qualquer
sinal sem ser SIGKILL e SISTOP.

int sigemptyset(sigset_t *set):Inicializa um signal set apontado por set de tal forma que
todos os sinais definidos pelo POSIX.1-2008 são excluídos. Um set é uma estrutura que permite a um processo
reconhecer grupos de sinais. Um processo pode ter um sinal posto para memorizar que sinais bloqueia e outro
para saber que sinais são válidos para processar e têm que ser tratados.

int sigaddset(sigset_t *set, int signo): Adds the specified signal (signo) to the signal set pointed by set.
Qualquer programa tem que usar sigemptyset() ou sigfillset() pelo menos uma vez antes de utilizar qualquer 
estrutura do tipo sigset_t.

int kill(pid_t pid, int sig): Manda um sinal sig para o processo especificado por pid.
Existe vários tipos de pid input. https://man7.org/linux/man-pages/man2/kill.2.html para mais info.

void exit(int status): Acaba um processo de forma normal e retorna o byte menos significativo de status para
o parent process.

char *getcwd(char *buf, size_t size): Retorna uma string que contém o absolute pathname da directoria atual.
A string é retornada através de buf[size], se estiver presente. Se o pathname fôr maior que o buf a função
retorna NULL. Neste caso o programa têm que ter uma proteção contra isto e alocar um buf maior.

int chdir(const char *path): Muda a directoria do processo que chamou a função para a directoria
especificada por path. Retorna 0 se for bem sucedida.

int stat(const char *restrict pathname,
                struct stat *restrict statbuf): Stat() vai buscar info. acerca de ficheiros apontados por pathname.
A info. é retornada para o statbuf. É preciso permissão de todas as directorias dentro de pathname para se chegar 
ao ficheiro. Não é preciso permissão para usar o ficheiro em si.

int lstat(const char *restrict pathname,
                struct stat *restrict statbuf):Idêntico a stat() excepto que se o pathname fôr um "symbolic link",
a função vai buscar info. sobre o link e não do ficheiro.

int fstat(int fd, struct stat *statbuf): Idêntico a stat() mas o ficheiro é tratado com um fd.

informações sobre struct_stat: https://man7.org/linux/man-pages/man2/lstat.2.html


int unlink(const char *pathname):Apaga um nome do filesystem. Se esse nome é o último link para aceder a um
ficheiro e nenhum processo tem o ficheiro aberto, o ficheiro é apagado e o espaço é libertado. Se o mesmo acontecer
mas pelo menos um processo tem-no aberto, então ele permanecerá até ao último fd fechar.

int execve(const char *pathname, char *const argv[],
                  char *const envp[]): Executa o programa dado por pathname. O programa que chamou a função é substituído
pela nova chamada. pathname tem que ser um executavel ou um script que comece com:#!interpreter [optional-arg].
Mais informações:https://man7.org/linux/man-pages/man2/execve.2.html

int dup(int oldfd): Aloca um novo fd que se refere ao mesmo ficheiro aberto oldfd. Depois disto, os dois podem ser usados
livremente. Eles partilham o mesmo file offset e file status flag.

int dup2(int oldfd, int newfd): O mesmo que dup() mas agora podemos escolher o nome do novo fd com newfd.

int pipe(int pipefd[2]): Cria um pipe, um canal de informação unidireciional que é usado entre processos. pipefd é um array
usado para retornar os dois fd's que se encontram nos extremos do pipe. pipefd[0] é o read e pipefd[1] é o write.

DIR *opendir(const char *name): Abre uma stream de directoria correspondente ao name dela. Retorna um apontador para essa stream.

struct dirent *readdir(DIR *dirp): Retorna um apontador dirent que representa a próxima directoria na stream, apontada por dirp.
Retorna NULL se chegar ao fim da stream.

int closedir(DIR *dirp): Isto vai ser um choque mas esta função fecha uma stream directoria associada a dirp. Se fôr bem sucedida, 
retorna 0 e também fecha o fd associado com dirp.

char *strerror(int errnum): Retorna um apontador para a string errnum. errnum é um erro locale.

void perror(const char *s):Printa uma mensagem de erro no standard error que descreva o problema encontrado.
Mais info. aqui: https://man7.org/linux/man-pages/man3/perror.3.html

int isatty(int fd): Testa se um fd é um file descriptor aberto e referente a um terminal.
Retorna 1 se fôr verdade e 0 se o contrário se verificar.

char *ttyname(int fd): Retorna um apontador com o pathname do terminal aberto através do fd.
Retorna NULL se o fd não fôr um terminal.

int ttyslot(void): Retorna o índice do terminal que chamou o processo. ex:(8 == tty8).

int ioctl(int fd, unsigned long request, ...): Manipula os parâmetros de ficheiros especiais (ex:terminais).
fd é um file descriptor aberto. O segundo argumento é dependente do ficheiro especial. O outro é um apontador para memória.
Tradicionalmente é char *argp porque veio antes da existência de void *.

char *getenv(const char *name): Procura a lista variavel name na lista env e retorna o apontador
para o valor correspondente em formato string.

int tcsetattr(int fildes, int optional_actions,
           const struct termios *termios_p): inicializa os parâmetros associados ao terminal associado a fd 
a partir da estrutura termios_p.
Mais informações:https://man7.org/linux/man-pages/man3/tcsetattr.3p.html

int tcgetattr(int fildes, struct termios *termios_p): Vai buscar os parâmetros associados ao terminal referido por fildes.
Estes parâmetros são armazenados na estrutura termios_p.

int tgetent(char *bp, const char *name): Carrega uma entry para name. Retorna 1 se fôr bem sucedida, 0 se não houver entry
ou se fôr demasiado vaga para aplicar curses.
Mais info.:https://man7.org/linux/man-pages/man3/curs_termcap.3x.html

int tgetflag(const char *id): Fica com a entry booleana para id ou 0 se não estiver disponivel.
Mais info.:https://man7.org/linux/man-pages/man3/curs_termcap.3x.html

int tgetnum(const char *id): Fica com a entry numérica de id ou -1 se
não estiver disponível.

char *tgetstr(const char *id, char **area): Retorna a string da entry id ou 0 senão estiver disponível.
Usa tputs para retirar o output da string retornada.
Mais info.:https://man7.org/linux/man-pages/man3/curs_termcap.3x.html

char *tgoto(const char *cap, int col, int row): ver aqui: https://man7.org/linux/man-pages/man3/curs_termcap.3x.html